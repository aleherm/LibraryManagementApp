<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Services</name>
    </assembly>
    <members>
        <member name="T:Services.ValidationErrors">
            <summary>
            Error messages to be shown at the validation of an entity add.
            </summary>
        </member>
        <member name="T:Services.ErrorsHandler">
            <summary>
            Error handler class.
            </summary>
        </member>
        <member name="M:Services.ErrorsHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.ErrorsHandler"/> class.
            </summary>
        </member>
        <member name="M:Services.ErrorsHandler.Add(System.String)">
            <summary>
            Adds the specified error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Services.ErrorsHandler.Get(System.Int32)">
            <summary>
            Gets error at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Services.ErrorsHandler.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Services.ErrorsHandler.Errors">
            <summary>
            Gets the instance of the inputErrors.
            </summary>
            <returns>The list of errors.</returns>
        </member>
        <member name="M:Services.ErrorsHandler.PrintErrors">
            <summary>
            Prints the errors.
            </summary>
        </member>
        <member name="M:Services.ErrorsHandler.ErrorCount">
            <summary>
            The number of errors.
            </summary>
            <returns>The number of errors</returns>
        </member>
        <member name="T:Services.AddressService">
            <summary>
            Address Service class.
            </summary>
        </member>
        <member name="M:Services.AddressService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.AddressService"/> class.
            </summary>
        </member>
        <member name="M:Services.AddressService.IsValidAddress(DomainModel.Address)">
            <summary>
            Validates the given Address object.
            </summary>
            <param name="address">The address.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Services.AddressService.AddNewAddress(DomainModel.Address)">
            <summary>
            Inserts a new Address object in the database.
            </summary>
            <param name="address">The address.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:Services.AuthorService">
            <summary>
            Author Service class.
            </summary>
        </member>
        <member name="M:Services.AuthorService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.AuthorService"/> class.
            </summary>
        </member>
        <member name="M:Services.AuthorService.IsValidAuthor(DomainModel.Author)">
            <summary>
            Validates the given Author object.
            </summary>
            <param name="author">The author.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Services.AuthorService.AddNewAuthor(DomainModel.Author)">
            <summary>
            Inserts a new Author object in the database.
            </summary>
            <param name="author">The author.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Services.AuthorService.GetAllAuthors">
            <summary>
            Gets the list of authors.
            </summary>
            <returns>The list of authors.</returns>
        </member>
        <member name="M:Services.AuthorService.GetAuthorById(System.Int32)">
            <summary>
            Gets the author by given ID.
            </summary>
            <param name="idAuthor">The ID of the author.</param>
            <returns>The Author object found.</returns>
        </member>
        <member name="T:Services.Service">
            <summary>
            Base service.
            </summary>
        </member>
        <member name="F:Services.Service.ErrorsHandler">
            <summary>
            The validation errors.
            </summary>
        </member>
        <member name="M:Services.Service.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.Service"/> class.
            </summary>
        </member>
        <member name="P:Services.Service.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
        </member>
        <member name="M:Services.Service.GetThresholdFromJSON(System.String)">
            <summary>
            Gets the threshold data needed for validation from the external JSON file.
            </summary>
            <param name="path">The path.</param>
            <returns>A Threshold object.</returns>
        </member>
        <member name="T:Services.BookService">
            <summary>
            Book Service class.
            </summary>
        </member>
        <member name="M:Services.BookService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.BookService"/> class.
            </summary>
        </member>
        <member name="M:Services.BookService.IsValidBook(DomainModel.Book)">
            <summary>
            Validates the given Book object.
            </summary>
            <param name="book">The book.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Services.BookService.AddNewBook(DomainModel.Book)">
            <summary>
            Inserts a new Book object in the database.
            </summary>
            <param name="book">The book.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Services.BookService.GetBookById(System.Int32)">
            <summary>
            Gets the book by given ID.
            </summary>
            <param name="idBook">The ID of the book.</param>
            <returns>The Book object found.</returns>
        </member>
        <member name="M:Services.BookService.AreRelatedDomains(System.Collections.Generic.IList{DomainModel.Domain})">
            <summary>
            Determines whether the specified domains are related.
            </summary>
            <param name="domains">The domains list.</param>
            <returns>
              <c>true</c> if one domain related to others; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Services.BorrowerService">
            <summary>
            Borrower service class.
            </summary>
        </member>
        <member name="F:Services.BorrowerService.borrowerRepository">
            <summary>
            Borrower Repository.
            </summary>
        </member>
        <member name="M:Services.BorrowerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.BorrowerService"/> class.
            </summary>
        </member>
        <member name="M:Services.BorrowerService.IsValidBorrower(DomainModel.Borrower)">
            <summary>
            Validates the given data for a Borrower object.
            </summary>
            <param name="borrower">The borrower.</param>
            <returns>True of False.</returns>
        </member>
        <member name="M:Services.BorrowerService.AddNewBorrower(DomainModel.Borrower)">
            <summary>
            Inserts a new Borrower object in the database.
            </summary>
            <param name="borrower">The borrower.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Services.BorrowerService.GetAllBorrowers">
            <summary>
            Gets the list of borrowers.
            </summary>
            <returns>The list of borrowers.</returns>
        </member>
        <member name="M:Services.BorrowerService.GetBorrowerById(System.Int32)">
            <summary>
            Gets the borrower by given ID.
            </summary>
            <param name="idBorrower">The ID of the borrower.</param>
            <returns>The Borrower object found.</returns>
        </member>
        <member name="T:Services.DomainService">
            <summary>
            Domain Service class.
            </summary>
        </member>
        <member name="M:Services.DomainService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.DomainService"/> class.
            </summary>
        </member>
        <member name="M:Services.DomainService.IsValidDomain(DomainModel.Domain)">
            <summary>
            Validates the given Domain object.
            </summary>
            <param name="domain">The domain.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Services.DomainService.AddNewDomain(DomainModel.Domain)">
            <summary>
            Inserts a new Domain object in the database.
            </summary>
            <param name="domain">The domain.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Services.DomainService.GetAllDomains">
            <summary>
            Gets the list of domains.
            </summary>
            <returns>The list of domains.</returns>
        </member>
        <member name="M:Services.DomainService.GetDomainById(System.Int32)">
            <summary>
            Gets the domain by given ID.
            </summary>
            <param name="idDomain">The ID of the domain.</param>
            <returns>The Domain object found.</returns>
        </member>
        <member name="T:Services.EditionService">
            <summary>
            Edition Service class.
            </summary>
        </member>
        <member name="M:Services.EditionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.EditionService"/> class.
            </summary>
        </member>
        <member name="M:Services.EditionService.IsValidEdition(DomainModel.Edition)">
            <summary>
            Validates the given Edition object.
            </summary>
            <param name="edition">The edition.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Services.EditionService.AddNewEdition(DomainModel.Edition)">
            <summary>
            Inserts a new Edition object in the database.
            </summary>
            <param name="edition">The edition.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Services.EditionService.GetAllEditions">
            <summary>
            Gets the list of editions.
            </summary>
            <returns>The list of editions.</returns>
        </member>
        <member name="M:Services.EditionService.GetEditionById(System.Int32)">
            <summary>
            Gets the edition by given ID.
            </summary>
            <param name="idEdition">The ID of the edition.</param>
            <returns>The Book object found.</returns>
        </member>
        <member name="T:Services.LoanService">
            <summary>
            Loan Service class.
            </summary>
        </member>
        <member name="M:Services.LoanService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Services.LoanService"/> class.
            </summary>
        </member>
        <member name="M:Services.LoanService.IsValidLoan(DomainModel.Loan)">
            <summary>
            Validates the given Loan object.
            </summary>
            <param name="loan">The loan.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Services.LoanService.AddNewLoan(DomainModel.Loan)">
            <summary>
            Inserts a new Loan object in the database.
            </summary>
            <param name="loan">The loan.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Services.LoanService.GetAllLoans">
            <summary>
            Gets the list of loans.
            </summary>
            <returns>The list of loans.</returns>
        </member>
        <member name="M:Services.LoanService.GetLoanById(System.Int32)">
            <summary>
            Gets the loan by given ID.
            </summary>
            <param name="idLoan">The ID of the loan.</param>
            <returns>The Book object found.</returns>
        </member>
    </members>
</doc>
